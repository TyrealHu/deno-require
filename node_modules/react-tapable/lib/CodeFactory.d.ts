declare class CodeFactory {
    protected _args: string[] | undefined;
    protected options: HookCompileOptions | undefined;
    content(options: CodeFactoryContent): void;
    create(options: HookCompileOptions): Function | undefined;
    setup(fns: any[], options: HookCompileOptions): void;
    /**
     * @param {{ type: "sync" | "promise" | "async", taps: Array<Tap>, interceptors: Array<Interceptor> }} options
     */
    init(options: HookCompileOptions): void;
    deinit(): void;
    header(): string;
    needContext(): boolean;
    callTap(tapIndex: number, { onError, onResult, onDone, rethrowIfPossible }: Omit<CodeFactoryContent, 'onDone'> & {
        onDone: false | (() => any);
    }): string;
    callTapsSeries({ onError, onResult, resultReturns, onDone, doneReturns, rethrowIfPossible }: CodeFactoryContent): any;
    callTapsLooping({ onError, onDone, rethrowIfPossible }: CodeFactoryContent): any;
    callTapsParallel({ onError, onResult, onDone, rethrowIfPossible, onTap }: CodeFactoryContent & {
        onTap?: (...args: any[]) => any;
    }): any;
    args({ before, after }: {
        before?: string;
        after?: string;
    }): string;
    getTapFn(idx: number): string;
    getTap(idx: number): string;
}
export default CodeFactory;
