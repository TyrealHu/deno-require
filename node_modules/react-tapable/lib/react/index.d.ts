import Hook from '../Hook';
import { ControllerHooks } from './types';
export declare class Controller<HooksMap> {
    name: string;
    hooks: ControllerHooks<HooksMap>;
    count: Record<string, number>;
    constructor(name: string, hooks: ControllerHooks<HooksMap>);
    call(hooksName: keyof HooksMap, ...args: any[]): any;
    callAsync(hooksName: keyof HooksMap, ...args: any[]): any;
    promise(hooksName: keyof HooksMap, ...args: any[]): Promise<any>;
    getHook(key: keyof HooksMap): Hook | undefined;
    getHooksNameMap(): Record<string, string>;
    getHookTapName(hook: string): string;
    tapHook(rawOptions: {
        once?: boolean;
        hook: keyof HooksMap;
        context?: boolean;
        mode: 'tap' | 'tapAsync' | 'tapPromise';
    }, rawFn: (...args: any[]) => any): void;
    removeTapHook(name: keyof HooksMap, mode: 'tap' | 'tapAsync' | 'tapPromise', fn: (...args: any[]) => any): void;
}
export declare function createTapableController<THooks extends Record<string, string>>(name: string, hooks: ControllerHooks<THooks>): {
    /**
     * This is a map for tapped hooks
     * */
    HooksNameMap: {
        [K in keyof THooks]: K;
    };
    /**
     * This useHook is used to tap function for React Hooks
     * */
    useTapable: (rawOptions: {
        once?: boolean;
        hook: keyof THooks;
        context?: boolean;
        mode: 'tap' | 'tapAsync' | 'tapPromise';
    }, rawFn: (...args: any[]) => any, rawUseAliasArr?: any[]) => any;
    /**
     * This is a method for call sync function
     * */
    call: (hooksName: keyof THooks, ...args: any[]) => any;
    /**
     * This is a method for call async function, and expected callback
     * */
    callAsync: (hooksName: keyof THooks, ...args: any[]) => any;
    /**
     * This is a method for call promise function, and return Promise Object
     * */
    promise: (hooksName: keyof THooks, ...args: any[]) => Promise<any>;
    /**
     * This function is used to tap function for React Component
     * */
    tapHook: (rawOptions: {
        once?: boolean;
        hook: keyof THooks;
        context?: boolean;
        mode: 'tap' | 'tapAsync' | 'tapPromise';
    }, rawFn: (...args: any[]) => any) => any;
    /**
     * This function is used to remove tapped function
     * */
    removeTapHook: (hook: keyof THooks, mode: 'tap' | 'tapAsync' | 'tapPromise', fn: (...args: any[]) => any) => void;
};
